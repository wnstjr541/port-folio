
function Clock(props) {
  return (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {props.date.toLocaleTimeString()}.</h2>
 // toLocaleTimeString() 사용자의 문화권에 맞는 시간표기법으로 시간을 리턴
    </div>
  );
}

function tick() {
  ReactDOM.render(
    <Clock date={new Date()} />,
    document.getElementById('root')
  );
}

setInterval(tick, 1000);
---------------------------------------------------------------------------------

-> 클래스로 변경

//react.component = component

class Clock extends React.Component {
  render(){
  return (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {this.props.date.toLocaleTimeString()}</h2> 
//this붙인이유는 함수형에서 인자로 받아오는것이 class에서는 없어서. 클래스가 속한 곳의 props를 받아오는게 this.props.
    </div>
  );
}}

function tick() {
  ReactDOM.render(
    <Clock date={new Date()} />,
    document.getElementById('root')
  );
}

setInterval(tick, 1000);

---------------------------------------------------------------------------------

-> 초기 this.state 지정하는 constructor 추가. 
// constructor 메서드는 class 내에서 객체를 생성하고 초기화하기 위한 특별한 메서드입니다.

class Clock extends React.Component {
  constructor(props) {
    super(props); 
//파생 클래스에서, 'this'를 사용하기 전에는 반드시 super()를 호출하여야 합니다. 그렇지 않을 경우 참조에러가 발생합니다.
//super 키워드는 부모 오브젝트의 함수를 호출할 때 사용됩니다.

    this.state = {date: new Date()};
//this.state 값에 {data: new Date()};를 주었기 때문에. 밑 컴포넌트에 따로 부여할 필요가 없다.
  }
  render(){
  return (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {this.props.date.toLocaleTimeString()}</h2>
    </div>
  );
}}

function tick() {
  ReactDOM.render(
    <Clock />,
    document.getElementById('root')
  );
}

setInterval(tick, 1000);


생명주기 메소드 나중에 머리깨질것같아
